services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: back-zookeeper-1
    environment:
      - ALLOW_ANONYMOUS_LOGIN=${ALLOW_ANONYMOUS_LOGIN}
    ports:
      - "2181:2181"
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      retries: 5
      timeout: 5s

  kafka:
    image: bitnami/kafka:latest
    container_name: back-kafka-1
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_DELETE_TOPIC_ENABLE=true
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_NUM_PARTITIONS=1
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
    ports:
      - "29092:29092"
    networks:
      - app-network
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:29092 --list",
        ]
      interval: 10s
      retries: 5
      timeout: 5s
    command: >
      bash -c '
      /opt/bitnami/scripts/kafka/setup.sh &&
      /opt/bitnami/scripts/kafka/run.sh &
      sleep 30 &&
      /opt/bitnami/kafka/bin/kafka-topics.sh --create --if-not-exists --topic user_created --bootstrap-server localhost:29092 --partitions 1 --replication-factor 1 &&
      tail -f /dev/null'

  redis:
    image: redis:latest
    container_name: back-redis-1
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      retries: 5
      timeout: 5s

  auth-db:
    image: postgres:latest
    container_name: back-auth-db-1
    env_file:
      - ./auth-service/.env
    environment:
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
    ports:
      - "5434:5432"
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    depends_on:
      auth-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./auth-service/.env
    ports:
      - "8080:8080"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      retries: 5
      timeout: 5s

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./notification-service/.env
    ports:
      - "8081:8080"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      retries: 5
      timeout: 5s

networks:
  app-network:
    driver: bridge

volumes:
  kafka-data:
    name: kafka_data
  redis-data:
    name: redis_data
  auth-db-data:
    name: auth_db_data
